from dotenv import load_dotenv
import os

load_dotenv()

# Load the environment variables
OPENAI_API_KEY = os.getenv("API_KEY")
from openai import OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)


# completion = client.chat.completions.create(
#     model="gpt-4o-mini",
#     messages=[
#         {"role": "system", "content": "You are a helpful assistant."},
#         {
#             "role": "user",
#             "content": "Write a haiku about recursion in programming."
#         }
#     ]
# )
#
# print(completion.choices[0].message)

def construct_message_object(role, content):
    '''
        Construct a message object for the OpenAI API

        Args:
            role (str): The role of the message
            content (str): The content of the message

        Returns:
            A message object for the OpenAI API of the form {"role": role, "content": content}
    '''
    if role not in ["system", "user", "assistant"]:
        raise ValueError("The role must be either 'system', 'user', or 'assistant'")
    if content is not str:
        raise ValueError("The content must be a string")
    return {"role": role, "content": content}

def construct_chat_object(system_message, user_message, chat_history=None):
    '''
        Construct a chat object for the OpenAI API

        Args:
            system_message (str): The system message. Required if chat_history is None, unused otherwise
            user_message (str): The user message
            chat_history (list): The chat history. Must be a list of message objects
        
        Returns:
            A chat object for the OpenAI API of the form [{"role": role, "content": content}, ...]
    '''
    messages = []

    if user_message is not str:
        raise ValueError("The user message must be a string")
    if chat_history is not None: #we have a chat history
        for message in chat_history:
            if "role" not in message.keys() or "content" not in message.keys():
                raise ValueError("The message object must have a 'role' and 'content' key")
            messages.append(message)
        messages.append(construct_message_object("user", user_message))
        return messages

    # We don't have a chat history
    if system_message is not str:
        raise ValueError("The system message must be a string")
    
    messages.append(construct_message_object("system", system_message))
    messages.append(construct_message_object("user", user_message))
    return messages
   
def start_chat(system_message, user_message):
    '''
        Start a chat with the OpenAI API

        Args:
            system_message (str): The system message
            user_message (str): The user message

        Returns:
            A message object generated by the OpenAI API of the form {"role": role, "content": content}
    '''
    chat_object = construct_chat_object(system_message, user_message)
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=chat_object
    )
    return completion.choices[0].message

def continue_chat(user_message, chat_history):
    '''
        Continue a chat with the OpenAI API

        Args:
            user_message (str): The user message
            chat_history (list): The chat history. Must be a list of message objects
        
        Returns:
            A message object of the form {"role": role, "content": content}
    '''


    chat_object = construct_chat_object(None, user_message, chat_history)
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=chat_object
    )
    return completion.choices[0].message
